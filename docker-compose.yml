services:
  sekirei-todo-nextjs:
    build:
      dockerfile: ./Dockerfile.nextjs
    container_name: sekirei-todo-nextjs-dev
    env_file:
      - .env
    volumes:
      - .:/app
    tmpfs:
      - /app/.next
        #depends_on:
        #  sekirei-todo-database:
        #    condition: service_healthy

  database:
    build:
      dockerfile: Dockerfile.mysql
    container_name: sekirei-todo-database
    env_file:
      - .env
    tmpfs:
      - /var/lib/mysql
    environment:
      TZ: 'Asia/Tokyo'
      LANG: 'ja_JP.UTF-8'
    cap_add:
      - SYS_NICE
    healthcheck:
      # こちらはデータ初期化時にtemporal serverが立ち上がるのを
      # きちんと待つためのコマンド
      #test: ['CMD', 'mysql', '-u', '$MYSQL_USER', '-p$MYSQL_PASSWORD', '$MYSQL_DATABASE', '-e', 'select 1;']
      # こちらはマルチステージビルドであらかじめ初期化を済ませた
      # temporal serverが立ち上がらないとき用の簡易コマンド
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 5s
      timeout: 20s
      retries: 3
      start_period: 5s
  
  database-preparation:
    image: node:20
    container_name: sekirei-todo-database-preparation
    env_file:
      - .env
    environment:
      NODE_ENV: 'development'
    volumes:
      - ./:/app:ro
    working_dir: /app
    command: >
      bash -c '
        npm install -g pnpm \
        && pnpm drizzle-kit push \
          --dialect=mysql \
          --schema=./src/db/schema.ts \
          --host=$DB_HOST \
          --user=$MYSQL_USER \
          --password=$MYSQL_PASSWORD \
          --database=$MYSQL_DATABASE; \
        pnpx tsx addTestData.ts
      '
    depends_on:
      database:
        condition: service_healthy
    
  sekirei-todo-webserver:
    image: nginx
    container_name: sekirei-todo-webserver
    ports:
      - 80:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf

networks:
  default:
    name: sekirei-todo-network

